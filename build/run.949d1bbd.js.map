{"version":3,"sources":["ts/Chart.ts","ts/Data.ts","ts/App.ts","ts/run.ts"],"names":[],"mappings":"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","file":"run.949d1bbd.js","sourceRoot":"..","sourcesContent":["import { IData, IValue } from './Data';\r\n\r\nexport class Chart {\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private data?: IData;\r\n\r\n    private minTime: number;\r\n    private maxTime: number;\r\n    private timeRange: number;\r\n\r\n    private min: IValue;\r\n    private max: IValue;\r\n    private range: number;\r\n\r\n    private padding = { t: 40, r: 40, b: 50, l: 100};\r\n    private scale = 1;\r\n    private offset = this.padding.l;\r\n\r\n    constructor (private canvas: HTMLCanvasElement) {\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        let mouseStart: { x: number, y: number };\r\n\r\n        this.canvas.onwheel = (e) => {\r\n            e.preventDefault();\r\n\r\n            const width = this.scale * this.canvas.width;\r\n\r\n            const scaleChange = -1 * e.deltaY / 100;\r\n            this.scale = Math.max(1, this.scale + scaleChange);\r\n\r\n            const mouse = this.getMousePosition(e);\r\n            const newWidth = this.scale * this.canvas.width;\r\n            const r = (-1 * this.offset + mouse.x) / width;\r\n\r\n            this.offset = -1 * (r * newWidth - mouse.x);\r\n            this.offset = Math.min(this.offset, this.canvas.width / 2);\r\n            this.offset = Math.max(this.offset, (-1 * this.scale * this.canvas.width) + this.canvas.width / 2);\r\n\r\n            this.render();\r\n        };\r\n\r\n        this.canvas.onmousedown = (e) => {\r\n            mouseStart = this.getMousePosition(e);\r\n        };\r\n\r\n        this.canvas.onmouseup = () => {\r\n            mouseStart = undefined;\r\n        };\r\n\r\n        this.canvas.onmouseout = () => {\r\n            mouseStart = undefined;\r\n        };\r\n\r\n        this.canvas.onmousemove = (e) => {\r\n            if (mouseStart) {\r\n                const position = this.getMousePosition(e);\r\n\r\n                this.offset += position.x - mouseStart.x;\r\n                this.offset = Math.min(this.offset, this.canvas.width / 2);\r\n                this.offset = Math.max(this.offset, (-1 * this.scale * this.canvas.width) + this.canvas.width / 2);\r\n\r\n                mouseStart = position;\r\n                this.render();\r\n            }\r\n        };\r\n    }\r\n\r\n    public setData (data: IData) {\r\n        this.data = data;\r\n\r\n        this.minTime = this.data.values[0].time;\r\n        this.maxTime = this.data.values[this.data.values.length - 1].time;\r\n        this.timeRange = this.maxTime - this.minTime;\r\n\r\n        for (const value of this.data.values) {\r\n            if (!this.min || this.min.signal > value.signal) { this.min = value; }\r\n            if (!this.max || this.max.signal < value.signal) { this.max = value; }\r\n        }\r\n\r\n        this.range = this.max.signal - this.min.signal;\r\n\r\n        this.render();\r\n    }\r\n\r\n    public render () {\r\n        this.clear();\r\n\r\n        if (this.data) {\r\n            this.renderData();\r\n            this.renderAxis();\r\n        }\r\n    }\r\n\r\n    private renderData () {\r\n        const width = this.scale * (this.canvas.width - this.padding.l - this.padding.r);\r\n        const height = this.canvas.height - this.padding.b - this.padding.t;\r\n        const widthRatio = width / this.timeRange;\r\n        const heightRatio = height / this.range;\r\n\r\n        this.ctx.strokeStyle = '#000';\r\n        this.ctx.lineWidth = 1.2;\r\n        this.ctx.beginPath();\r\n\r\n        let time: number;\r\n        for (const value of this.data.values) {\r\n            const x = this.offset + (value.time - this.minTime) * widthRatio;\r\n            const y = this.padding.t + height - ((value.signal - this.min.signal) * heightRatio);\r\n\r\n            if (time) {\r\n                this.ctx.lineTo(x, y);\r\n            } else {\r\n                this.ctx.moveTo(x, y);\r\n            }\r\n\r\n            time = value.time;\r\n        }\r\n\r\n        this.ctx.stroke();\r\n\r\n        this.ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n        this.ctx.fillRect(0, 0, this.padding.l, this.canvas.height);\r\n    }\r\n\r\n    private renderAxis () {\r\n        const width = this.scale * (this.canvas.width - this.padding.l - this.padding.r);\r\n        const height = this.canvas.height - this.padding.b - this.padding.t;\r\n        const widthRatio = width / this.timeRange;\r\n        const heightRatio = height / this.range;\r\n\r\n        this.ctx.font = '12px sans-serif';\r\n        this.ctx.fillStyle = '#000';\r\n        this.ctx.strokeStyle = '#777';\r\n        this.ctx.lineWidth = 1;\r\n\r\n        // main lines\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.padding.l - 0.5, this.padding.t);\r\n        this.ctx.lineTo(this.padding.l - 0.5, this.canvas.height - this.padding.b + 0.5);\r\n        this.ctx.lineTo(this.canvas.width - this.padding.r, this.canvas.height - this.padding.b + 0.5);\r\n        this.ctx.stroke();\r\n\r\n        // axis labels\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'bottom';\r\n        this.ctx.fillText(this.data.headers.signal.trim(), this.padding.l, this.padding.t - 5);\r\n\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'top';\r\n        this.ctx.fillText(this.data.headers.time.trim(), this.canvas.width - this.padding.r, this.canvas.height - this.padding.b + 25);\r\n\r\n        // time labels\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'top';\r\n\r\n        for (let m = 0; m < this.maxTime; m++) {\r\n            let x = this.offset + (m - this.minTime) * widthRatio;\r\n\r\n            if (x >= this.padding.l && x <= this.canvas.width - this.padding.r) {\r\n                x = Math.floor(x) + 0.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(x, this.canvas.height - this.padding.b);\r\n                this.ctx.lineTo(x, this.canvas.height - this.padding.b + 5);\r\n                this.ctx.stroke();\r\n                this.ctx.fillText(m.toString(), x, this.canvas.height - this.padding.b + 10);\r\n            }\r\n        }\r\n\r\n        // signal labels\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'middle';\r\n\r\n        const minSignal = Math.floor(this.min.signal);\r\n        for (let s = minSignal; s < this.max.signal; s += 0.5) {\r\n            let y = this.padding.t + height - ((s - this.min.signal) * heightRatio);\r\n\r\n            if (y <= this.canvas.height - this.padding.b) {\r\n                y = Math.floor(y) + 0.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(this.padding.l, y);\r\n                this.ctx.lineTo(this.padding.l - 5, y);\r\n                this.ctx.stroke();\r\n                this.ctx.fillText(s.toFixed(1), this.padding.l - 10, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private getMousePosition (e: MouseEvent): { x: number, y: number } {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        return {\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        };\r\n    }\r\n}\r\n","import data01 from '../data/19_05_10_01.txt';\r\n\r\nexport interface IValue {\r\n    time: number;\r\n    signal: number;\r\n}\r\n\r\nexport interface IData {\r\n    headers: { time: string, signal: string };\r\n    values: IValue[];\r\n}\r\n\r\nexport async function getData (): Promise<IData> {\r\n    const response = await fetch(data01);\r\n    const text = await response.text();\r\n\r\n    return parseData(text);\r\n}\r\n\r\nfunction parseData (text: string): IData {\r\n    const rows = text.split('\\n');\r\n    let index = 0;\r\n\r\n    while (!rows[index].includes('# data plots')) { index++; }\r\n    index++;\r\n\r\n    const headers = rows[index].split(';');\r\n    const data: IData = {\r\n        headers: { time: headers[0].trim(), signal: headers[1].trim() },\r\n        values: []\r\n    };\r\n\r\n    index++;\r\n    while (!rows[index].includes('#')) {\r\n        data.values.push(parseValue(rows[index]));\r\n        index++;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction parseValue (text: string): IValue {\r\n    // 0,008750863969;215,747600000000\r\n    const texts = text.replace(/,/g, '.').split(';');\r\n\r\n    const value = {\r\n        time: parseFloat(texts[0]),\r\n        signal: parseFloat(texts[1])\r\n    };\r\n\r\n    return value;\r\n}\r\n","import { Chart } from './Chart';\r\nimport { getData } from './Data';\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n\r\n    private chart: Chart;\r\n\r\n    constructor () {\r\n        this.canvas = document.createElement('canvas');\r\n        this.chart = new Chart(this.canvas);\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => {\r\n            this.resize();\r\n            this.chart.render();\r\n            // this.run()\r\n        };\r\n\r\n        this.resize();\r\n        this.run();\r\n    }\r\n\r\n    private async run () {\r\n        const data = await getData();\r\n\r\n        this.chart.setData(data);\r\n        // let previousTime = 0;\r\n        // const step = (time: number) => {\r\n        //     window.anim = window.requestAnimationFrame((t) => step(t));\r\n        //     this.clear();\r\n\r\n        //     previousTime = time;\r\n        // };\r\n\r\n        // window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private resize () {\r\n        const w = window.innerWidth;\r\n        const h = window.innerHeight;\r\n\r\n        this.canvas.width = w;\r\n        this.canvas.height = Math.floor(h * (2 / 3));\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n        timeout: number;\r\n    }\r\n}\r\n\r\n// parcel-bunder: cleanup after auto reload\r\nlet dead = document.body.querySelector('canvas') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\ndead = document.body.querySelector('div') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\n\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\nwindow.clearTimeout(window.timeout);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}