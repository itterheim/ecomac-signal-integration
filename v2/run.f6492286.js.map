{"version":3,"sources":["ts/texts.ts","ts/Chart.ts","ts/Menu.ts","ts/Table.ts","ts/App.ts","ts/run.ts"],"names":[],"mappings":";AAWA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANA,IAAM,EAAkC,CACpC,OAAQ,CAAE,GAAI,UAAW,GAAI,gBAG3B,EAAO,KAEb,SAAgB,EAAM,GACX,OAAA,EAAM,GAAK,IAAS,IAAI,EAAG,IADtC,QAAA,KAAA;;ACTa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,WAEA,EAAA,WACI,SAAA,EAAqB,GAAA,KAAA,OAAA,EACZ,KAAA,OAAO,UAAY,QAEnB,KAAA,aASb,OANY,EAAA,UAAA,WAAR,WACU,IAAA,EAAO,sCACc,EAAA,KAAK,UAAS,mBAEpC,KAAA,OAAO,UAAY,GAEhC,EAbA,GAAa,QAAA,MAAA;;ACFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAYI,SAAA,EAAqB,GAAA,KAAA,OAAA,EACZ,KAAA,WAgBb,OAbY,EAAA,UAAA,SAAR,WAWS,KAAA,OAAO,UAVC,mWAYrB,EA7BA,GAAa,QAAA,KAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WACI,SAAA,EAAqB,GAAA,KAAA,OAAA,EACZ,KAAA,SA6Bb,OA1BY,EAAA,UAAA,OAAR,WAwBS,KAAA,OAAO,UAvBC,2pBAyBrB,EA/BA,GAAa,QAAA,MAAA;;ACUA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVb,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,UACA,EAAA,QAAA,WAQA,EAAA,WAYI,SAAA,IACS,KAAA,WAEA,KAAA,MAAQ,IAAI,EAAA,MAAM,SAAS,cAAc,cACzC,KAAA,MAAQ,IAAI,EAAA,MAAM,SAAS,cAAc,cACzC,KAAA,KAAO,IAAI,EAAA,KAAK,SAAS,cAAc,aAyGpD,OAzFY,EAAA,UAAA,SAAR,WAQI,SAAS,KAAK,mBAAmB,aAPhB,kMAwFzB,EA1HA,GAAa,QAAA,IAAA;;ACiBb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3BA,IAAA,EAAA,QAAA,SAWI,EAAO,SAAS,KAAK,cAAc,UACnC,GACA,EAAK,WAAW,YAAY,IAEhC,EAAO,SAAS,KAAK,cAAc,SAE/B,EAAK,WAAW,YAAY,GAGhC,OAAO,qBAAqB,OAAO,MACnC,OAAO,cAAc,OAAO,UAC5B,OAAO,aAAa,OAAO,SAE3B,QAAQ,QACR,QAAQ,IAAI,IAAI,MAEhB,IAAI,EAAA","file":"run.f6492286.js","sourceRoot":"..","sourcesContent":["interface IText {\r\n    en: string;\r\n    cs: string;\r\n}\r\n\r\nconst texts: { [key: string]: IText } = {\r\n    noData: { en: 'No data', cs: 'Nejsou data'}\r\n};\r\n\r\nconst lang = 'en';\r\n\r\nexport function text (key: string) {\r\n    return texts[key][lang] || `-${key}-`;\r\n}\r\n","import { text } from './texts';\r\n\r\nexport class Chart {\r\n    constructor (private target: HTMLDivElement) {\r\n        this.target.innerHTML = 'Chart';\r\n\r\n        this.showNoData();\r\n    }\r\n\r\n    private showNoData () {\r\n        const html = `\r\n            <div class=\"no-data\">${text('noData')}</div>\r\n        `;\r\n        this.target.innerHTML = html;\r\n    }\r\n}\r\n","export class Menu {\r\n    public onLoad: () => void;\r\n    public onImport: () => void;\r\n    public onExport: () => void;\r\n\r\n    public onToolStart: () => void;\r\n    public onToolEnd: () => void;\r\n    public onToolMove: () => void;\r\n\r\n    public onZoomReset: () => void;\r\n    public onZoomMode: (mode: 'normal' | 'scale') => void;\r\n\r\n    constructor (private target: HTMLDivElement) {\r\n        this.createUi();\r\n    }\r\n\r\n    private createUi () {\r\n        const html = `\r\n            <button id=\"load\">Load</button>\r\n            <button id=\"export\">Export</button>\r\n            <button id=\"start\">Start</button>\r\n            <button id=\"end\">End</button>\r\n            <button id=\"move\">Move</button>\r\n            <button id=\"zoom-reset\">Zoom reset</button>\r\n            <button id=\"zoom-mode\">Zoom mode</button>\r\n        `;\r\n\r\n        this.target.innerHTML = html;\r\n    }\r\n}\r\n","export class Table {\r\n    constructor (private target: HTMLDivElement) {\r\n        this.render();\r\n    }\r\n\r\n    private render () {\r\n        const html = `\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Column 1</th>\r\n                        <th>Column 2</th>\r\n                        <th>Column 3</th>\r\n                        <th>Column 4</th>\r\n                        <th>Column 5</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Column 1</td>\r\n                    <td>Column 2</td>\r\n                    <td>Column 3</td>\r\n                    <td>Column 4</td>\r\n                    <td>Column 5</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        `;\r\n\r\n        this.target.innerHTML = html;\r\n    }\r\n}\r\n","import { Chart } from './Chart';\r\nimport { Menu } from './Menu';\r\nimport { Table } from './Table';\r\n\r\n// import { Chart } from './Chart';\r\n// import { Data } from './Data';\r\n// import { IData } from './interfaces/IData';\r\n// import { IMark } from './interfaces/IMark';\r\n// import { Table } from './Table';\r\n\r\nexport class App {\r\n//     private canvas: HTMLCanvasElement;\r\n//     private tableWrapper: HTMLDivElement;\r\n//     private controlsWrapper: HTMLDivElement;\r\n\r\n    private menu: Menu;\r\n    private chart: Chart;\r\n    private table: Table;\r\n\r\n//     private data: IData;\r\n//     private marks: IMark[] = [];\r\n\r\n    constructor () {\r\n        this.createUI();\r\n\r\n        this.chart = new Chart(document.querySelector('div.chart'));\r\n        this.table = new Table(document.querySelector('div.table'));\r\n        this.menu = new Menu(document.querySelector('div.menu'));\r\n\r\n//         this.chart.onMarksUpdated = (marks) => {\r\n//             this.marks = marks;\r\n//             this.table.update(this.marks, this.data ? this.data.values : undefined);\r\n//         };\r\n\r\n//         window.onresize = () => {\r\n//             this.resize();\r\n//             this.chart.render();\r\n//             this.table.update(this.marks, this.data ? this.data.values : undefined);\r\n//         };\r\n\r\n//         this.resize();\r\n    }\r\n\r\n    private createUI () {\r\n        const template = `\r\n            <div class=\"app\">\r\n                <div class=\"menu\"></div>\r\n                <div class=\"chart\"></div>\r\n                <div class=\"table\"></div>\r\n            </div>\r\n        `;\r\n        document.body.insertAdjacentHTML('afterbegin', template);\r\n\r\n//         this.canvas = document.getElementById('chart') as HTMLCanvasElement;\r\n//         this.tableWrapper = document.getElementById('table') as HTMLDivElement;\r\n//         this.controlsWrapper = document.getElementById('controls') as HTMLDivElement;\r\n\r\n//         const start = document.getElementById('start');\r\n//         const end = document.getElementById('end');\r\n//         const move = document.getElementById('move');\r\n//         const exportCsv = document.getElementById('export');\r\n//         const input = document.getElementById('datafile') as HTMLInputElement;\r\n\r\n//         start.onclick = () => {\r\n//             start.classList.add('selected');\r\n//             end.classList.remove('selected');\r\n//             move.classList.remove('selected');\r\n\r\n//             this.chart.setTool('start');\r\n//         };\r\n\r\n//         end.onclick = () => {\r\n//             end.classList.add('selected');\r\n//             start.classList.remove('selected');\r\n//             move.classList.remove('selected');\r\n\r\n//             this.chart.setTool('end');\r\n//         };\r\n\r\n//         move.onclick = () => {\r\n//             move.classList.add('selected');\r\n//             start.classList.remove('selected');\r\n//             end.classList.remove('selected');\r\n\r\n//             this.chart.setTool('move');\r\n//         };\r\n\r\n//         exportCsv.onclick = () => {\r\n//             if (this.data) {\r\n//                 this.table.exportCsv(this.data.name.replace(/\\.[^.]+$/i, ''));\r\n//             }\r\n//         };\r\n\r\n//         input.onchange = async () => {\r\n//             this.data = await this.getData(input.files[0]);\r\n\r\n//             if (this.data) {\r\n//                 this.chart.setData(this.data);\r\n//             }\r\n//         };\r\n    }\r\n\r\n//     private async getData (file: File): Promise<IData> {\r\n//         const text = await this.readFile(file);\r\n\r\n//         return new Data(file.name, text);\r\n//     }\r\n\r\n//     private async readFile (file: File): Promise<string> {\r\n//         return new Promise<string>((resolve, reject) => {\r\n//             const reader = new FileReader();\r\n//             reader.readAsText(file);\r\n\r\n//             reader.onload = () => {\r\n//                 resolve(reader.result.toString());\r\n//             };\r\n//             reader.onerror = (e) => {\r\n//                 reject(e);\r\n//             };\r\n//         });\r\n//     }\r\n\r\n//     private resize () {\r\n//         const w = window.innerWidth;\r\n//         const h = window.innerHeight;\r\n\r\n//         this.canvas.width = w;\r\n//         this.canvas.height = Math.floor(h * (2 / 3));\r\n\r\n//         this.tableWrapper.style.height = `${h - this.canvas.height + 1}px`;\r\n//         this.controlsWrapper.style.height = `${h - this.canvas.height + 1}px`;\r\n//     }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n        timeout: number;\r\n    }\r\n}\r\n\r\n// parcel-bundler: cleanup after auto reload\r\nlet dead = document.body.querySelector('canvas') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\ndead = document.body.querySelector('div') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\n\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\nwindow.clearTimeout(window.timeout);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}