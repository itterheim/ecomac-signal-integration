{"version":3,"sources":["ts/Chart.ts","ts/Data.ts","ts/Table.ts","ts/App.ts","ts/run.ts"],"names":[],"mappings":"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","file":"run.c952063a.js","sourceRoot":"..","sourcesContent":["import { IData, IValue } from './Data';\r\n\r\ntype Tool = 'start' | 'end' | 'move';\r\n\r\nexport interface IMark extends IValue {\r\n    type: 'start' | 'end';\r\n    index: number;\r\n}\r\n\r\ninterface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class Chart {\r\n    public onMarksUpdated: (marks: IMark[]) => void;\r\n\r\n    private ctx: CanvasRenderingContext2D;\r\n    private tool: Tool = 'start';\r\n\r\n    private data?: IData;\r\n    private marks: IMark[] = [];\r\n\r\n    private minTime: number;\r\n    private maxTime: number;\r\n    private timeRange: number;\r\n\r\n    private min: IValue;\r\n    private max: IValue;\r\n    private range: number;\r\n\r\n    private padding = { t: 40, r: 40, b: 50, l: 100};\r\n    private scale = 1;\r\n    private offset = this.padding.l;\r\n\r\n    private selectionTime: number;\r\n    private selectionIndex: number;\r\n\r\n    constructor (private canvas: HTMLCanvasElement) {\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        let mouseStart: { x: number, y: number };\r\n\r\n        this.canvas.onwheel = (e) => {\r\n            e.preventDefault();\r\n\r\n            const width = this.scale * this.canvas.width;\r\n\r\n            const scaleChange = -1 * e.deltaY / 100;\r\n            this.scale = Math.max(1, this.scale + scaleChange);\r\n\r\n            const mouse = this.getMousePosition(e);\r\n            const newWidth = this.scale * this.canvas.width;\r\n            const r = (-1 * this.offset + mouse.x) / width;\r\n\r\n            this.offset = -1 * (r * newWidth - mouse.x);\r\n            this.offset = Math.min(this.offset, this.canvas.width / 2);\r\n            this.offset = Math.max(this.offset, (-1 * this.scale * this.canvas.width) + this.canvas.width / 2);\r\n\r\n            this.render();\r\n        };\r\n\r\n        this.canvas.onmousedown = (e) => {\r\n            if (this.tool === 'move' || e.ctrlKey) {\r\n                mouseStart = this.getMousePosition(e);\r\n            } else if (this.selectionIndex !== undefined) {\r\n                const value = this.data.values[this.selectionIndex];\r\n                const type = this.tool === 'start' ? 'start' : 'end';\r\n\r\n                const markIndex = this.marks.findIndex((x) => x.index === this.selectionIndex && x.type === type);\r\n\r\n                if (markIndex > -1) {\r\n                    this.marks.splice(markIndex, 1);\r\n                } else {\r\n                    this.marks.push({\r\n                        type,\r\n                        index: this.selectionIndex,\r\n                        ...value\r\n                    });\r\n                }\r\n\r\n                this.marks.sort((a, b) => {\r\n                    if (a.index > b.index) {\r\n                        return 1;\r\n                    } else if (a.index === b.index && a.type === 'end') {\r\n                        return -1;\r\n                    } else if (a.index === b.index && a.type === 'start') {\r\n                        return 1;\r\n                    } else {\r\n                        return -1;\r\n                    }\r\n                });\r\n\r\n                this.render();\r\n                if (this.onMarksUpdated) { this.onMarksUpdated(this.marks); }\r\n            }\r\n        };\r\n\r\n        this.canvas.onmouseup = () => {\r\n            mouseStart = undefined;\r\n        };\r\n\r\n        this.canvas.onmouseout = () => {\r\n            mouseStart = undefined;\r\n        };\r\n\r\n        this.canvas.onmousemove = (e) => {\r\n            if (mouseStart) {\r\n                const position = this.getMousePosition(e);\r\n\r\n                this.offset += position.x - mouseStart.x;\r\n                this.offset = Math.min(this.offset, this.canvas.width / 2);\r\n                this.offset = Math.max(this.offset, (-1 * this.scale * this.canvas.width) + this.canvas.width / 2);\r\n\r\n                mouseStart = position;\r\n                this.render();\r\n            } else {\r\n                const mouse = this.getMousePosition(e);\r\n                const px = -1 * this.offset + mouse.x;\r\n                const width = this.scale * (this.canvas.width - this.padding.l - this.padding.r);\r\n                const r = px / width;\r\n\r\n                if (this.timeRange) {\r\n                    this.selectionTime = this.min.time + this.timeRange * r;\r\n                    this.selectionIndex = undefined;\r\n                    for (let i = 0; i < this.data.values.length && this.data.values[i].time < this.selectionTime; i++) {\r\n                        this.selectionIndex = i;\r\n                    }\r\n                }\r\n\r\n                this.render();\r\n            }\r\n        };\r\n\r\n        document.onkeyup = (e) => {\r\n            console.log(e);\r\n            if (e.code === 'KeyS') { this.tool = 'start'; }\r\n            if (e.code === 'KeyE') { this.tool = 'end'; }\r\n            if (e.code === 'KeyM') { this.tool = 'move'; }\r\n\r\n            this.render();\r\n        };\r\n    }\r\n\r\n    public setData (data: IData) {\r\n        this.data = data;\r\n\r\n        this.minTime = this.data.values[0].time;\r\n        this.maxTime = this.data.values[this.data.values.length - 1].time;\r\n        this.timeRange = this.maxTime - this.minTime;\r\n\r\n        for (const value of this.data.values) {\r\n            if (!this.min || this.min.signal > value.signal) { this.min = value; }\r\n            if (!this.max || this.max.signal < value.signal) { this.max = value; }\r\n        }\r\n\r\n        this.range = this.max.signal - this.min.signal;\r\n\r\n        this.render();\r\n    }\r\n\r\n    public setTool (tool: Tool) {\r\n        this.tool = tool;\r\n        this.selectionIndex = undefined;\r\n        this.selectionTime = undefined;\r\n    }\r\n\r\n    public render () {\r\n        this.clear();\r\n\r\n        if (this.data) {\r\n            this.renderData();\r\n            this.renderAxis();\r\n        }\r\n    }\r\n\r\n    private renderData () {\r\n        const width = this.scale * (this.canvas.width - this.padding.l - this.padding.r);\r\n        const height = this.canvas.height - this.padding.b - this.padding.t;\r\n        const widthRatio = width / this.timeRange;\r\n        const heightRatio = height / this.range;\r\n\r\n        this.ctx.strokeStyle = '#000';\r\n        this.ctx.lineWidth = 0.8;\r\n        this.ctx.beginPath();\r\n\r\n        let time: number;\r\n        let selectedX: number;\r\n        let selectedY: number;\r\n        for (let i = 0; i < this.data.values.length; i++) {\r\n            const value = this.data.values[i];\r\n            const x = this.offset + (value.time - this.minTime) * widthRatio;\r\n            const y = this.padding.t + height - ((value.signal - this.min.signal) * heightRatio);\r\n\r\n            if (x > 0) {\r\n                if (time) {\r\n                    this.ctx.lineTo(x, y);\r\n                } else {\r\n                    this.ctx.moveTo(x, y);\r\n                }\r\n                time = value.time;\r\n\r\n                if (i === this.selectionIndex) {\r\n                    selectedX = x;\r\n                    selectedY = y;\r\n                }\r\n            }\r\n\r\n        }\r\n        this.ctx.stroke();\r\n\r\n        if (this.tool !== 'move') {\r\n            this.ctx.lineWidth = 1.2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(selectedX, selectedY);\r\n            if (this.tool === 'start') {\r\n                this.ctx.lineTo(selectedX, selectedY + 15);\r\n            } else if (this.tool === 'end') {\r\n                this.ctx.lineTo(selectedX, selectedY - 15);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n\r\n        for (const mark of this.marks) {\r\n            const x = this.offset + (mark.time - this.minTime) * widthRatio;\r\n            const y = this.padding.t + height - ((mark.signal - this.min.signal) * heightRatio);\r\n\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            if (mark.type === 'start') {\r\n                this.ctx.strokeStyle = '#0fbe05';\r\n                this.ctx.lineTo(x, y + 10);\r\n            } else if (mark.type === 'end') {\r\n                this.ctx.strokeStyle = '#d00';\r\n                this.ctx.lineTo(x, y - 10);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n\r\n        let lineStart: IPoint;\r\n        for (let i = 0; i < this.marks.length; i++) {\r\n            const mark = this.marks[i];\r\n            const x = this.offset + (mark.time - this.minTime) * widthRatio;\r\n            const y = this.padding.t + height - ((mark.signal - this.min.signal) * heightRatio);\r\n\r\n            if (mark.type === 'start' && !lineStart) {\r\n                lineStart = {x, y};\r\n            } else if (mark.type === 'end' && lineStart) {\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeStyle = '#777';\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(lineStart.x, lineStart.y);\r\n                this.ctx.lineTo(x, y);\r\n                this.ctx.stroke();\r\n\r\n                lineStart = undefined;\r\n            }\r\n        }\r\n\r\n        this.ctx.fillStyle = 'rgba(255,255,255,1)';\r\n        this.ctx.fillRect(0, 0, this.padding.l, this.canvas.height);\r\n    }\r\n\r\n    private renderAxis () {\r\n        const width = this.scale * (this.canvas.width - this.padding.l - this.padding.r);\r\n        const height = this.canvas.height - this.padding.b - this.padding.t;\r\n        const widthRatio = width / this.timeRange;\r\n        const heightRatio = height / this.range;\r\n\r\n        this.ctx.font = '12px sans-serif';\r\n        this.ctx.fillStyle = '#000';\r\n        this.ctx.strokeStyle = '#777';\r\n        this.ctx.lineWidth = 1;\r\n\r\n        // main lines\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.padding.l - 0.5, this.padding.t);\r\n        this.ctx.lineTo(this.padding.l - 0.5, this.canvas.height - this.padding.b + 0.5);\r\n        this.ctx.lineTo(this.canvas.width - this.padding.r, this.canvas.height - this.padding.b + 0.5);\r\n        this.ctx.stroke();\r\n\r\n        // axis labels\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'bottom';\r\n        this.ctx.fillText(this.data.headers.signal.trim(), this.padding.l, this.padding.t - 5);\r\n\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'top';\r\n        this.ctx.fillText(this.data.headers.time.trim(), this.canvas.width - this.padding.r, this.canvas.height - this.padding.b + 25);\r\n\r\n        // time labels\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'top';\r\n\r\n        for (let m = 0; m < this.maxTime; m++) {\r\n            let x = this.offset + (m - this.minTime) * widthRatio;\r\n\r\n            if (x >= this.padding.l && x <= this.canvas.width - this.padding.r) {\r\n                x = Math.floor(x) + 0.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(x, this.canvas.height - this.padding.b);\r\n                this.ctx.lineTo(x, this.canvas.height - this.padding.b + 5);\r\n                this.ctx.stroke();\r\n                this.ctx.fillText(m.toString(), x, this.canvas.height - this.padding.b + 10);\r\n            }\r\n        }\r\n\r\n        // signal labels\r\n        this.ctx.textAlign = 'right';\r\n        this.ctx.textBaseline = 'middle';\r\n\r\n        const minSignal = Math.floor(this.min.signal);\r\n        for (let s = minSignal; s < this.max.signal; s += 0.5) {\r\n            let y = this.padding.t + height - ((s - this.min.signal) * heightRatio);\r\n\r\n            if (y <= this.canvas.height - this.padding.b) {\r\n                y = Math.floor(y) + 0.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(this.padding.l, y);\r\n                this.ctx.lineTo(this.padding.l - 5, y);\r\n                this.ctx.stroke();\r\n                this.ctx.fillText(s.toFixed(1), this.padding.l - 10, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private getMousePosition (e: MouseEvent): { x: number, y: number } {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        return {\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        };\r\n    }\r\n}\r\n","export interface IValue {\r\n    time: number;\r\n    signal: number;\r\n}\r\n\r\nexport interface IData {\r\n    headers: { time: string, signal: string };\r\n    values: IValue[];\r\n}\r\n\r\nexport async function getData (file: File): Promise<IData> {\r\n    const text = await readFile(file);\r\n\r\n    return parseData(text);\r\n}\r\n\r\nasync function readFile (file: File): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsText(file);\r\n\r\n        reader.onload = () => {\r\n            resolve(reader.result.toString());\r\n        };\r\n        reader.onerror = (e) => {\r\n            reject(e);\r\n        };\r\n    });\r\n}\r\n\r\nfunction parseData (text: string): IData {\r\n    const rows = text.split('\\n');\r\n    let index = 0;\r\n\r\n    while (!rows[index].includes('# data plots')) { index++; }\r\n    index++;\r\n\r\n    const headers = rows[index].split(';');\r\n    const data: IData = {\r\n        headers: { time: headers[0].trim(), signal: headers[1].trim() },\r\n        values: []\r\n    };\r\n\r\n    index++;\r\n    while (!rows[index].includes('#')) {\r\n        data.values.push(parseValue(rows[index]));\r\n        index++;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction parseValue (text: string): IValue {\r\n    // 0,008750863969;215,747600000000\r\n    const texts = text.replace(/,/g, '.').split(';');\r\n\r\n    const value = {\r\n        time: parseFloat(texts[0]),\r\n        signal: parseFloat(texts[1])\r\n    };\r\n\r\n    return value;\r\n}\r\n","import { IMark } from './Chart';\r\nimport { IData, IValue } from './Data';\r\n\r\ninterface IPeak {\r\n    start: number;\r\n    end: number;\r\n    previous: IMark;\r\n    values: IValue[];\r\n    response: number;\r\n}\r\n\r\nexport class Table {\r\n    private marks: IMark[] = [];\r\n    private values: IValue[] = [];\r\n\r\n    private maxSignal: number = 0;\r\n\r\n    private readonly decimals = 6;\r\n\r\n    constructor (private target: HTMLDivElement) {\r\n        this.update();\r\n    }\r\n\r\n    public update (marks: IMark[] = [], values: IValue[] = []) {\r\n        this.marks = marks;\r\n        this.values = values;\r\n\r\n        this.maxSignal = Math.max.apply(null, values.map((x) => x.signal));\r\n\r\n        this.target.innerHTML = '';\r\n\r\n        const peaks = this.getPeaks(marks);\r\n\r\n        let rows = '';\r\n        for (const peak of peaks) {\r\n            rows += `<tr>\r\n                <td>${peak.start.toFixed(this.decimals)}</td>\r\n                <td>${peak.end.toFixed(this.decimals)}</td>\r\n                <td>${(peak.response * 60).toFixed(this.decimals)}</td>\r\n            </tr>`;\r\n        }\r\n\r\n        const template = `\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Start [min]</th>\r\n                        <th>End [min]</th>\r\n                        <th>Response [mV/s]</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    ${rows}\r\n                </tbody>\r\n            </table>\r\n        `;\r\n\r\n        this.target.innerHTML = template;\r\n    }\r\n\r\n    private getPeaks (marks: IMark[]): IPeak[] {\r\n\r\n        const peaks: IPeak[] = [];\r\n\r\n        let lastMarks: IMark[] = [];\r\n        for (let i = 0; i < marks.length; i++) {\r\n            const mark = marks[i];\r\n\r\n            if (mark.type === 'start') {\r\n                lastMarks.push(mark);\r\n            } else if (mark.type === 'end' && lastMarks.length > 0) {\r\n\r\n                for (let j = 0; j < lastMarks.length; j++) {\r\n                    peaks.push({\r\n                        start: lastMarks[j].time,\r\n                        end: mark.time,\r\n                        previous: j > 0 ? lastMarks[0] : undefined,\r\n                        values: this.getValues(lastMarks[j], mark),\r\n                        response: 0\r\n                    });\r\n                }\r\n\r\n                lastMarks = [];\r\n            }\r\n        }\r\n\r\n        for (const peak of peaks) {\r\n            peak.response = this.getResponse(peak.values, this.values[peak.previous ? peak.previous.index : undefined]);\r\n        }\r\n\r\n        return peaks;\r\n    }\r\n\r\n    private getValues (from: IMark, to: IMark): IValue[] {\r\n        return [...this.values.slice(from.index, to.index + 1)];\r\n    }\r\n\r\n    private getResponse (values: IValue[], previous: IValue): number {\r\n        const baseFrom: IValue = previous ? { time: previous.time, signal: previous.signal } : { time: values[0].time, signal: values[0].signal };\r\n        const baseTo: IValue = { time: values[values.length - 1].time, signal: values[values.length - 1].signal };\r\n\r\n        let totalArea = 0;\r\n\r\n        for (let i = 0; i < values.length - 1; i++) {\r\n            const h = values[i + 1].time - values[i].time;\r\n\r\n            const intLeft = this.getIntersection(\r\n                baseFrom, baseTo,\r\n                // values[i],\r\n                { time: values[i].time, signal: this.maxSignal },\r\n                { time: values[i].time, signal: 0 }\r\n            );\r\n\r\n            const intRight = this.getIntersection(\r\n                baseFrom, baseTo,\r\n                // values[i + 1],\r\n                { time: values[i + 1].time, signal: this.maxSignal },\r\n                { time: values[i + 1].time, signal: 0 }\r\n            );\r\n\r\n            const a = values[i].signal - intLeft.signal;\r\n            const b = values[i + 1].signal - intRight.signal;\r\n\r\n            const area = ((a + b) / 2) * h;\r\n            totalArea += area;\r\n        }\r\n\r\n        return totalArea;\r\n    }\r\n\r\n    private getIntersection (l1From: IValue, l1To: IValue, l2From: IValue, l2To: IValue): IValue {\r\n        const p0x = l1From.time;\r\n        const p0y = l1From.signal;\r\n        const p1x = l1To.time;\r\n        const p1y = l1To.signal;\r\n        const p2x = l2From.time;\r\n        const p2y = l2From.signal;\r\n        const p3x = l2To.time;\r\n        const p3y = l2To.signal;\r\n\r\n        const s1x = p1x - p0x;\r\n        const s1y = p1y - p0y;\r\n        const s2x = p3x - p2x;\r\n        const s2y = p3y - p2y;\r\n\r\n        let ix: number;\r\n        let iy: number;\r\n\r\n        const s = (-s1y * (p0x - p2x) + s1x * (p0y - p2y)) / (-s2x * s1y + s1x * s2y);\r\n        const t = (s2x * (p0y - p2y) - s2y * (p0x - p2x)) / (-s2x * s1y + s1x * s2y);\r\n\r\n        if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\r\n            ix = p0x + (t * s1x);\r\n            iy = p0y + (t * s1y);\r\n            return { time: ix, signal: iy };\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import { Chart, IMark } from './Chart';\r\nimport { getData, IData } from './Data';\r\nimport { Table } from './Table';\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private tableWrapper: HTMLDivElement;\r\n    private controlsWrapper: HTMLDivElement;\r\n\r\n    private chart: Chart;\r\n    private table: Table;\r\n\r\n    private data: IData;\r\n    private marks: IMark[] = [];\r\n\r\n    constructor () {\r\n        this.createUI();\r\n\r\n        this.chart = new Chart(this.canvas);\r\n        this.table = new Table(this.tableWrapper);\r\n\r\n        this.chart.onMarksUpdated = (marks) => {\r\n            this.marks = marks;\r\n            this.table.update(this.marks, this.data ? this.data.values : undefined);\r\n        };\r\n\r\n        window.onresize = () => {\r\n            this.resize();\r\n            this.chart.render();\r\n        };\r\n\r\n        this.resize();\r\n        this.run();\r\n    }\r\n\r\n    private createUI () {\r\n        const template = `\r\n            <canvas id=\"chart\"></canvas>\r\n            <div id=\"table\"></div>\r\n            <div id=\"controls\">\r\n                <button id=\"start\" class=\"selected\">Start</button>\r\n                <button id=\"end\">End</button>\r\n                <button id=\"move\">Move</button>\r\n                <br/><br/>\r\n                <input type=\"file\" name=\"datafile\" id=\"datafile\" accept=\"text/plain\" />\r\n                <br/><br/>\r\n                <div class=\"shortcuts\">\r\n                    Shortcuts:<br/>\r\n                    <b>s</b> - Start<br/>\r\n                    <b>e</b> - End<br/>\r\n                    <b>m</b> or hold <b>Ctrl</b> - Move<br/>\r\n                    <b>mouse wheel</b> - Zoom<br/>\r\n                </div>\r\n            </div>\r\n        `;\r\n        document.body.insertAdjacentHTML('afterbegin', template);\r\n\r\n        this.canvas = document.getElementById('chart') as HTMLCanvasElement;\r\n        this.tableWrapper = document.getElementById('table') as HTMLDivElement;\r\n        this.controlsWrapper = document.getElementById('controls') as HTMLDivElement;\r\n\r\n        const start = document.getElementById('start');\r\n        const end = document.getElementById('end');\r\n        const move = document.getElementById('move');\r\n        const input = document.getElementById('datafile') as HTMLInputElement;\r\n\r\n        start.onclick = () => {\r\n            start.classList.add('selected');\r\n            end.classList.remove('selected');\r\n            move.classList.remove('selected');\r\n\r\n            this.chart.setTool('start');\r\n        };\r\n\r\n        end.onclick = () => {\r\n            end.classList.add('selected');\r\n            start.classList.remove('selected');\r\n            move.classList.remove('selected');\r\n\r\n            this.chart.setTool('end');\r\n        };\r\n\r\n        move.onclick = () => {\r\n            move.classList.add('selected');\r\n            start.classList.remove('selected');\r\n            end.classList.remove('selected');\r\n\r\n            this.chart.setTool('move');\r\n        };\r\n\r\n        input.onchange = async (e) => {\r\n            this.data = await getData(input.files[0]);\r\n\r\n            if (this.data) {\r\n                this.chart.setData(this.data);\r\n            }\r\n        };\r\n    }\r\n\r\n    private async run () {\r\n        // this.data = await getData();\r\n\r\n        // this.chart.setData(this.data);\r\n    }\r\n\r\n    private resize () {\r\n        const w = window.innerWidth;\r\n        const h = window.innerHeight;\r\n\r\n        this.canvas.width = w;\r\n        this.canvas.height = Math.floor(h * (2 / 3));\r\n\r\n        this.tableWrapper.style.height = `${h - this.canvas.height + 1}px`;\r\n        this.controlsWrapper.style.height = `${h - this.canvas.height + 1}px`;\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n        timeout: number;\r\n    }\r\n}\r\n\r\n// parcel-bunder: cleanup after auto reload\r\nlet dead = document.body.querySelector('canvas') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\ndead = document.body.querySelector('div') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\n\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\nwindow.clearTimeout(window.timeout);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}